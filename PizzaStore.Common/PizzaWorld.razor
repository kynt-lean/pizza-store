@implements IDisposable
@inject IPizzaService PizzaService
@inject IOrdersService OrdersService

@if (loading) { <LoadingIndicator /> }

<div class="main">
    <ul class="pizza-cards">
    @foreach (var special in specials)
    {
        <li @onclick="@(() => ShowConfigurePizzaDialog(special))" style="background-image: url('@special.ImageUrl')">
            <div class="pizza-info">
                <span class="title">@special.Name</span>
                @special.Description
                <span class="price">@special.BasePrice.GetFormattedPrice()</span>
            </div>
        </li>
    }
    </ul>
</div>

<ConfigurePizzasOrder @ref="configurePizzasOrder" Order="order" OnRemoveConfiguredPizza="RemoveConfiguredPizza" OnPlaceOrder="PlaceOrder" />

@if (showingConfigureDialog)
{
    <ConfigurePizzaDialog Pizza="configuringPizza" OnCancel="CancelConfigurePizzaDialog" OnConfirm="ConfirmConfigurePizzaDialog" />
}

@code {
    bool loading = true;
    List<PizzaSpecialDto> specials = [];
    IDisposable? subscription;
    PizzaDto? configuringPizza;
    bool showingConfigureDialog = false;
    OrderDto order = new OrderDto();
    ConfigurePizzasOrder? configurePizzasOrder;

    protected override void OnInitialized()
    {
        subscription = HookToListSpecial().Subscribe(res =>
        {
            specials = res;
            loading = false;
            InvokeAsync(StateHasChanged);
        });
    }

    IObservable<List<PizzaSpecialDto>> HookToListSpecial()
    {
        return Observable.FromAsync(async () =>
        {
            await Task.Delay(500);
            return await PizzaService.GetListSpecialAsync();
        });
    }

    void ShowConfigurePizzaDialog(PizzaSpecialDto special)
    {
        configuringPizza = new PizzaDto()
        {
            Special = special,
            SpecialId = special.Id,
            Size = PizzaDto.DefaultSize,
            Toppings = new List<PizzaToppingDto>(),
        };
        showingConfigureDialog = true;
    }

    void CancelConfigurePizzaDialog()
    {
        configuringPizza = null;
        showingConfigureDialog = false;
    }

    void ConfirmConfigurePizzaDialog()
    {
        if (configuringPizza is not null)
        {
            order.Pizzas.Add(configuringPizza);
            configuringPizza = null;
            configurePizzasOrder?.RefreshOrderTotalPrice();
        }        
        showingConfigureDialog = false;
    }

    void RemoveConfiguredPizza(PizzaDto pizza)
    {
        order.Pizzas.Remove(pizza);
    }

    async Task PlaceOrder()
    {
        await OrdersService.PlaceOrderAsync(order);
        order = new OrderDto();
    }

    public void Dispose()
    {
        subscription?.Dispose();
    }
}