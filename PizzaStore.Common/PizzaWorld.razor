@implements IDisposable
@inject IPizzaService PizzaService
@inject IOrdersService OrdersService

@if (loading) { <LoadingIndicator /> }

<div class="pizza-cards">
    <ul>
    @foreach (var special in specials)
    {
        <li @onclick="@(() => ShowConfigurePizzaDialog(special))" style="background-image: url('@special.ImageUrl')">
            <div class="pizza-info">
                <span class="title">@special.Name</span>
                @special.Description
                <span class="price">@special.BasePrice.GetFormattedPrice()</span>
            </div>
        </li>
    }
    </ul>
</div>

<div class="sidebar">
    @if (order.Pizzas.Any())
    {
        <div class="order-contents">
            <h2>Your order</h2>

            @foreach (var configuredPizza in order.Pizzas)
            {
                <ConfiguredPizzaItem Pizza="configuredPizza" OnRemoved="@(() => RemoveConfiguredPizza(configuredPizza))" />
            }
        </div>
    }
    else
    {
        <div class="empty-cart">Choose a pizza<br>to get started</div>
    }

    <div class="order-total @(order.Pizzas.Any() ? "" : "hidden")">
        Total:
        <span class="total-price">@totalPrice.GetFormattedPrice()</span>
        <button class="btn btn-warning" disabled="@(order.Pizzas.Count == 0)" @onclick="PlaceOrder">
            Order >
        </button>
    </div>
</div>

@if (showingConfigureDialog)
{
    <ConfigurePizzaDialog Pizza="configuringPizza" OnCancel="CancelConfigurePizzaDialog" OnConfirm="ConfirmConfigurePizzaDialog" />
}

@code {
    bool loading = true;
    List<PizzaSpecialDto> specials = [];
    IDisposable? subscription;
    PizzaDto? configuringPizza;
    bool showingConfigureDialog = false;
    OrderDto order = new OrderDto();
    decimal totalPrice;
    Subject<bool> totalPriceSub = new();

    protected override void OnInitialized()
    {
        subscription = HookToQuery().Subscribe(res =>
        {
            specials = res;
            loading = false;
            InvokeAsync(StateHasChanged);
        });

        HookToOrderTotalPrice().Subscribe(res =>
        {
            totalPrice = res;
            InvokeAsync(StateHasChanged);
        });
        totalPriceSub.OnNext(true);
    }

    protected IObservable<List<PizzaSpecialDto>> HookToQuery()
    {
        return Observable.FromAsync(async () =>
        {
            await Task.Delay(500);
            return await PizzaService.GetListSpecialAsync();
        });
    }

    protected void ShowConfigurePizzaDialog(PizzaSpecialDto special)
    {
        configuringPizza = new PizzaDto()
        {
            Special = special,
            SpecialId = special.Id,
            Size = PizzaDto.DefaultSize,
            Toppings = new List<PizzaToppingDto>(),
        };
        showingConfigureDialog = true;
    }

    protected void CancelConfigurePizzaDialog()
    {
        configuringPizza = null;
        showingConfigureDialog = false;
    }

    protected void ConfirmConfigurePizzaDialog()
    {
        if (configuringPizza is not null)
        {
            order.Pizzas.Add(configuringPizza);
            configuringPizza = null;
        }        
        showingConfigureDialog = false;
    }

    protected void RemoveConfiguredPizza(PizzaDto pizza)
    {
        order.Pizzas.Remove(pizza);
    }

    async Task PlaceOrder()
    {
        await OrdersService.PlaceOrderAsync(order);
        order = new OrderDto();
    }

    protected IObservable<decimal> HookToOrderTotalPrice()
    {
        return totalPriceSub
            .SelectMany(_ => Observable.FromAsync(async () => await OrdersService.GetOrderTotalPriceAsync(order)));
    }

    public void Dispose()
    {
        subscription?.Dispose();
        totalPriceSub.Dispose();
    }
}