@implements IDisposable
@inject IPizzaService PizzaService

<div class="cart-item">
    <a @onclick="OnRemoved" class="delete-item">x</a>
    <div class="title">@(Pizza.Size)" @Pizza.Special?.Name</div>
    <ul>
        @foreach (var topping in Pizza.Toppings)
        {
        <li>+ @topping.Topping?.Name</li>
        }
    </ul>
    <div class="item-price">
        @totalPrice.GetFormattedPrice()
    </div>
</div>

@code {
    [Parameter, EditorRequired] public PizzaDto Pizza { get; set; } = new(); 
    [Parameter, EditorRequired] public EventCallback OnRemoved { get; set; }

    decimal totalPrice;
    Subject<bool> totalPriceSub = new();

    protected override void OnInitialized()
    {
        HookToTotalPrice().Subscribe(res =>
        {
            totalPrice = res;
            InvokeAsync(StateHasChanged);
        });
        totalPriceSub.OnNext(true);
    }

    protected IObservable<decimal> HookToTotalPrice()
    {
        return totalPriceSub
            .SelectMany(_ => Observable.FromAsync(async () => await PizzaService.GetPizzaTotalPriceAsync(Pizza)));
    }

    public void Dispose()
    {
        totalPriceSub.Dispose();
    }
}