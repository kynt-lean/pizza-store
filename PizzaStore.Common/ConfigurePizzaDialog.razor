@implements IDisposable
@inject IPizzaService PizzaService

<div class="dialog-container">
    <div class="dialog">
        <div class="dialog-title">
            <h2>@Pizza.Special?.Name</h2>
            @Pizza.Special?.Description
        </div>
        <form class="dialog-body">
            <div>
                <label>Size:</label>
                <input type="range" min="OrderPizzaDto.MinimumSize" max="OrderPizzaDto.MaximumSize" step="1" @bind="Pizza.Size" @bind:event="oninput" 
                    @onchange="@(() => totalPriceSub.OnNext(true))" />
                <span class="size-label">
                    @(Pizza.Size)" (Â£@(totalPrice.GetFormattedPrice()))
                </span>
            </div>
        </form>
        <div class="dialog-buttons">
            <button class="btn btn-secondary mr-auto">Cancel</button>
            <span class="mr-center">
                Price: <span class="price">@(totalPrice.GetFormattedPrice())</span>
            </span>
            <button class="btn btn-success ml-auto">Order</button>
        </div>
    </div>
</div>

@code {
    [Parameter, EditorRequired] public OrderPizzaDto Pizza { get; set; } = new();

    decimal totalPrice;
    Subject<bool> totalPriceSub = new();

    protected override void OnInitialized()
    {
        HookToTotalPrice().Subscribe(res =>
        {
            totalPrice = res;
            InvokeAsync(StateHasChanged);
        });
        totalPriceSub.OnNext(true);
    }

    protected IObservable<decimal> HookToTotalPrice()
    {
        return totalPriceSub
            .SelectMany(_ => Observable.FromAsync(async () => await PizzaService.GetPizzaTotalPriceAsync(Pizza)));
    }

    public void Dispose()
    {
        totalPriceSub.Dispose();
    }
}