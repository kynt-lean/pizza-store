@implements IDisposable
@inject IPizzaService PizzaService

@if (loading) { <LoadingIndicator /> }

<ul class="pizza-cards">
@foreach (var special in specials)
{
    <li @onclick="@(() => ShowConfigurePizzaDialog(special))" style="background-image: url('@special.ImageUrl')">
        <div class="pizza-info">
            <span class="title">@special.Name</span>
            @special.Description
            <span class="price">@special.BasePrice.GetFormattedPrice()</span>
        </div>
    </li>
}
</ul>

@if (showingConfigureDialog)
{
    <ConfigurePizzaDialog Pizza="configuringPizza" />
}

@code {
    bool loading = true;
    List<PizzaSpecialDto> specials = [];
    IDisposable? subscription;
    OrderPizzaDto? configuringPizza;
    bool showingConfigureDialog = false;

    protected override void OnInitialized()
    {
        subscription = HookToQuery().Subscribe(res =>
        {
            specials = res;
            loading = false;
            InvokeAsync(StateHasChanged);
        });
    }

    protected IObservable<List<PizzaSpecialDto>> HookToQuery()
    {
        return Observable.FromAsync(async () =>
        {
            await Task.Delay(2000);
            return await PizzaService.GetListSpecialAsync();
        });
    }

    void ShowConfigurePizzaDialog(PizzaSpecialDto special)
    {
        configuringPizza = new OrderPizzaDto()
        {
            Special = special,
            SpecialId = special.Id,
            Size = OrderPizzaDto.DefaultSize,
            Toppings = new List<PizzaToppingDto>(),
        };
        showingConfigureDialog = true;
    }

    public void Dispose()
    {
        subscription?.Dispose();
    }
}