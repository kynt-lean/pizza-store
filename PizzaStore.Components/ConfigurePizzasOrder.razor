@inject IOrdersService OrdersService

<div class="sidebar">
    @if (Order.Pizzas.Any())
    {
        <div class="order-contents">
            <h2>Your order</h2>

            @foreach (var configuredPizza in Order.Pizzas)
            {
                <ConfiguredPizzaItem Pizza="configuredPizza" OnRemoved="@(_ => RemoveConfiguredPizza(configuredPizza))" />
            }
        </div>
    }
    else
    {
        <div class="empty-cart">Choose a pizza<br>to get started</div>
    }

    <div class="order-total @(Order.Pizzas.Any() ? "" : "hidden")">
        Total:
        <span class="total-price">@Order.GetTotalPrice().GetFormattedPrice()</span>
        <button class="btn btn-warning" disabled="@(Order.Pizzas.Count == 0)" @onclick="PlaceOrder">
            Order >
        </button>
    </div>
</div>

@code {
    [Parameter, EditorRequired] public OrderDto Order { get; set; } = new();
    [Parameter, EditorRequired] public EventCallback<PizzaDto> OnRemoveConfiguredPizza { get; set; }
    [Parameter, EditorRequired] public EventCallback<int> OnPlacedOrder { get; set; }

    async void RemoveConfiguredPizza(PizzaDto pizza)
    {
        await OnRemoveConfiguredPizza.InvokeAsync(pizza);
    }

    async Task PlaceOrder()
    {
        var orderId = await OrdersService.PlaceOrderAsync(Order);
        await OnPlacedOrder.InvokeAsync(orderId);
    }
}