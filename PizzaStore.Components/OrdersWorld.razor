@implements IDisposable
@inject IOrdersService OrdersService

<div class="main">
    @if (loading)
    {
        <LoadingIndicator />
    }
    else if (!ordersWithStatus.Any())
    {
        <h2>No orders placed</h2>
        <a class="btn btn-success" href="">Order some pizza</a>
    }
    else
    {
        <div class="list-group orders-list">
            @foreach (var item in ordersWithStatus)
            {
                <div class="list-group-item">
                    <div class="col">
                        <h5>@item.Order.CreatedTime.ToLongDateString()</h5>
                        Items:
                        <strong>@item.Order.Pizzas.Count()</strong>;
                        @* Total price:
                        <strong>Â£@item.Order.GetFormattedTotalPrice()</strong> *@
                    </div>
                    <div class="col">
                        Status: <strong>@item.StatusText</strong>
                    </div>
                    <div class="col flex-grow-0">
                        <a href="myorders/@item.Order.OrderId" class="btn btn-success">
                            Track &gt;
                        </a>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    bool loading = true;
    List<OrderWithStatusDto> ordersWithStatus = [];
    IDisposable? subscription;

    protected override void OnInitialized()
    {
        subscription = HookToListOrderWithStatus().Subscribe(res =>
        {
            ordersWithStatus = res;
            loading = false;
            InvokeAsync(StateHasChanged);
        });
    }

    IObservable<List<OrderWithStatusDto>> HookToListOrderWithStatus()
    {
        return Observable.FromAsync(async () =>
        {
            await Task.Delay(100);
            return await OrdersService.GetListOrderWithStatusAsync();
        });
    }

    public void Dispose()
    {
        subscription?.Dispose();
    }
}