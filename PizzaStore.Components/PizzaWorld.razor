@implements IDisposable
@inject NavigationManager NavigationManager
@inject IPizzaService PizzaService
@inject OrderState OrderState

@if (loading) { <LoadingIndicator /> }

<div class="main">
    <ul class="pizza-cards">
        @foreach (var special in specials)
        {
            <li @onclick="@(() => OrderState.ShowConfigurePizzaDialog(special))" style="background-image: url('@special.ImageUrl')">
                <div class="pizza-info">
                    <span class="title">@special.Name</span>
                    @special.Description
                    <span class="price">@special.BasePrice.GetFormattedPrice()</span>
                </div>
            </li>
        }
    </ul>
</div>

<ConfigurePizzasOrder @ref="configurePizzasOrder" Order="order" OnRemoveConfiguredPizza="OrderState.RemoveConfiguredPizza" />

@if (OrderState.ShowingConfigureDialog)
{
    <ConfigurePizzaDialog Pizza="OrderState.ConfiguringPizza" OnCancel="OrderState.CancelConfigurePizzaDialog" OnConfirm="OrderState.ConfirmConfigurePizzaDialog" />
}

@code {
    bool loading = true;
    List<PizzaSpecialDto> specials = [];
    IDisposable? subscription;
    OrderDto order => OrderState.Order;
    ConfigurePizzasOrder? configurePizzasOrder;

    protected override void OnInitialized()
    {
        subscription = HookToListSpecial().Subscribe(res =>
        {
            specials = res;
            loading = false;
            InvokeAsync(StateHasChanged);
        });
    }

    IObservable<List<PizzaSpecialDto>> HookToListSpecial()
    {
        return Observable.FromAsync(async () =>
        {
            await Task.Delay(300);
            return await PizzaService.GetListSpecialAsync();
        });
    }

    public void Dispose()
    {
        subscription?.Dispose();
    }
}